// This file was automatically generated based on the contents of *.tmpl
// If you need to update this file, change the contents of those files
// (or add new ones) and run 'go generate'

package main

import "golang.org/x/tools/godoc/vfs/mapfs"

var VFS = mapfs.New(map[string]string{
	`driver.mk`: "# Required binaries: pv, dockerfiledeps\n#\n# The latter can be installed with `go get github.com/nyarly/dockerfiledeps`\n#\n# Usage like\n#\n# Makefile:\n#   REPOSITORY_NAME := project\n#   include driver.mk\n#\n# Put image sources in subdirectories with a Dockerfile\n\n## Registry settings\nREGISTRY_HOST ?= docker.otenv.com\nREGISTRY_URL := $(REGISTRY_HOST)$(if $(REPOSITORY_NAME),/$(REPOSITORY_NAME))\n\nREPO := $(shell git remote get-url origin)\nCOMMIT := $(shell git rev-parse HEAD)\nVERSION_TAG := $(shell git describe --exact-match 2>/dev/null || echo unversioned)\nCLEAN := no\nDEFAULT_TAG := dirty\n\nifeq ($(shell git diff-index --quiet HEAD ; echo $$?),0)\nCLEAN := yes\nDEFAULT_TAG := latest\nelse\nVERSION_TAG := $(VERSION_TAG)-dirty\nendif\n\nTAG := $(or $(TAG),$(DEFAULT_TAG))\n\nTMPDIR ?= /tmp\n\nall: build-all push-all\n\nbuild-%: .build/%\n	@echo -n\n\npush-%: .push/%\n	@echo -n\n\nclean:\n	rm -rf .build\n\n.tags/base: .pull-once | .tags\n	[ \"$(shell cat $@)\" = \"$(TAG)\" ] || echo $(TAG) > $@\n\n.tags/version: .pull-once | .tags\n	[ \"$(shell cat $@)\" = \"$(VERSION_TAG)\" ] || echo $(VERSION_TAG) > $@\n\n## Build rule for all docker stacks\n.build/%: docker-deps.mk .tags/base .tags/version | .logs\n	cd $* && \\\n	docker build \\\n		-t $(REGISTRY_URL)/$*:local \\\n		-t $(REGISTRY_URL)/$*:$(shell cat .tags/base) \\\n		-t $(REGISTRY_URL)/$*:$(shell cat .tags/version) \\\n		--build-arg BUILD_IMAGE_REPO=$(REPO) \\\n		--build-arg BUILD_IMAGE_REPO=$* \\\n		--build-arg BUILD_IMAGE_COMMIT=$(COMMIT) \\\n		--build-arg BUILD_IMAGE_DOCKERFILE=$(shell git ls-tree --full-name --name-only HEAD $<) \\\n		--build-arg BUILD_IMAGE_CLEAN=$(CLEAN) \\\n		--build-arg VERSION=$(shell cat .tags/version) \\\n		$(EXTRA_DOCKER_BUILD_ARGS-$(*)) . \\\n		> ../.logs/build-$* 2>&1\n	touch $@\n\ndocker-deps.mk: $(shell find . -type f -name Dockerfile) $(shell which dockerfiledeps)\n	grep -q $@ .gitignore || echo $@ >> .gitignore\n	dockerfiledeps \"$(REGISTRY_URL)\" . > docker-deps.mk\n\ninclude docker-deps.mk\n\n.pull-once:\n	@grep -q $@ .gitignore || echo $@ >> .gitignore\n	touch .pull-once\n\n.push/%: .tags/base .tags/version .build/% | .push\n	docker push $(REGISTRY_URL)/$*:$(shell cat .tags/base) > .logs/push-$* 2>&1\n	docker push $(REGISTRY_URL)/$*:$(shell cat .tags/version) >> .logs/push-$* 2>&1\n	touch $@\n\n.SECONDARY: .push/%\n\n.build .push .logs .remote .tags:\n	@grep -q '^$@$' .gitignore || echo $@ >> .gitignore\n	mkdir -p $@\n\n.build/%: DARGS?=\n\n.PHONY: all build-all help clean push-all .pull-once\n",
})
